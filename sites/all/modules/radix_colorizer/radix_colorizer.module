<?php

/**
 * @file
 * Integrates Colorizer with Radix-based themes.
 */

/**
 * Implements hook_menu().
 */
function radix_colorizer_menu() {
  $items = array();

  foreach (_radix_colorizer_get_themes() as $theme) {
    $items['admin/appearance/colorizer/' . $theme->name] = array(
      'title' => $theme->info['name'],
      'page arguments' => array('radix_colorizer_settings', $theme->name),
      'type' => MENU_LOCAL_TASK,
      'file' => 'radix_colorizer.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('radix_colorizer_admin_settings', 3),
      'access arguments' => array('administer site configuration'),
    );
  }

  return $items;
}

/**
 * Implements hook_init().
 * @see colorizer_init().
 */
function radix_colorizer_init() {
  static $first = TRUE;
  global $theme_key;
  $instance = $theme_key;

  // allow other modules to change the instance we are updating
  // allows for group-specific color instances rather than tying to theme
  drupal_alter('colorizer_instance', $instance);

  // Check for non-default schemes.
  if (_radix_colorizer_get_current_scheme($instance) != 'default') {
    $file = variable_get('colorizer_' . $instance . '_stylesheet', '');

    // Recreate any missing colorize css files.
    if (!file_exists($file)) {
      $palette = radix_colorizer_get_palette($theme_key, $instance);
      if (!empty($palette)) {
        $file = radix_colorizer_update_stylesheet($theme_key, $instance, $palette);
        clearstatcache();
        if (!file_exists($file)) {
          // could not create the style sheet, so stop trying to recreate it
          variable_del('colorizer_' . $instance . '_stylesheet');
        }
      }
    }
    drupal_add_css(file_create_url($file), array(
      'type' => 'external',
      'group' => CSS_THEME,
      'every_page' => TRUE,
      'weight' => 999, // want to be last
    ));
  }
}

/**
 * Implements hook_system_themes_page_alter().
 */
function radix_colorizer_system_themes_page_alter(&$theme_groups) {
  foreach ($theme_groups['enabled'] as &$theme) {
    if (_radix_colorizer_is_radix_based($theme)) {
      // Add a colorizer link to each list of theme operations.
      $theme->operations[] = array(
        'title' => t('Colorizer'),
        'href' => 'admin/appearance/colorizer/' . $theme->name,
      );
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function radix_colorizer_module_implements_alter(&$implementations, $hook) {
  // Unset colorizer's implementation of hook_init.
  switch ($hook) {
    case 'init':
      unset($implementations['colorizer']);
      break;
  }
}

/**
 * Returns a list of themes based on Radix.
 */
function _radix_colorizer_get_themes() {
  $themes = array();

  // Make a list of themes based on Radix.
  foreach (list_themes() as $theme) {
    if (_radix_colorizer_is_radix_based($theme)) {
      if ($theme->info['name'] != '{{Name}}') { // We don't want the kits.
        $themes[$theme->name] = $theme;
      }
    }
  }

  return $themes;
}

/**
 * Checks if a theme is radix-based.
 */
function _radix_colorizer_is_radix_based($theme) {
  return (isset($theme->base_themes) && in_array('radix', array_keys($theme->base_themes)));
}

/**
 * Returns the current scheme for a themes.
 */
function _radix_colorizer_get_current_scheme($theme) {
  $instance = $theme;
  $current_scheme = variable_get('colorizer_' . $instance . '_current_scheme', 'default');

  return $current_scheme;
}

/**
 * Retrieves the Color module information for a particular theme.
 * @see colorizer_get_info().
 */
function radix_colorizer_get_info($theme, $build_colors = FALSE) {
  static $theme_info = array();

  if (isset($theme_info[$theme])) {
    return $theme_info[$theme];
  }

  $info = array();
  $path = drupal_get_path('theme', $theme);
  $inc_file = 'colorizer/colorizer.inc';
  $file = DRUPAL_ROOT . '/' . $path . '/' . $inc_file;
  if ($inc_file && file_exists($file)) {
    include $file;
    if ($build_colors) {
      $info = colorizer_fill_defaults($info);
    }
    $theme_info[$theme] = $info;
  }
  return $info;
}

/**
 * Retrieves the color palette for a particular theme and instance.
 * @see colorizer_get_palette().
 */
function radix_colorizer_get_palette($theme, $instance = '', $default = FALSE) {
  // Fetch and expand default palette.
  $info = radix_colorizer_get_info($theme);
  if (empty($info)) {
    return array();
  }
  $palette = $info['schemes']['default']['colors'];
  $instance = empty($instance) ? $theme : $instance;

  // Load variable.
  return $default ? $palette : variable_get('colorizer_' . $instance . '_palette', $palette);
}

/**
 * Create a new stylesheet by replacing color variables
 * @see colorizer_update_stylesheet().
 */
function radix_colorizer_update_stylesheet($theme, $instance, $palette) {

  // Delete old files.
  $file = variable_get('colorizer_' . $instance . '_stylesheet', '');
  @drupal_unlink($file);

  // Prepare target locations for generated files.
  $id = $instance . '-' . substr(hash('sha256', serialize($palette) . microtime()), 0, 8);
  $paths['color'] = 'public://colorizer';
  foreach ($paths as $path) {
    file_prepare_directory($path, FILE_CREATE_DIRECTORY);
    @drupal_chmod($path, 0777);
  }
  $paths['target'] = $paths['color'] . '/';
  $paths['source'] = drupal_get_path('theme', $theme) . '/';

  $theme_path = drupal_get_path('theme', $theme);
  $stylesheet = 'colorizer/colorizer.css';
  $file = $paths['source'] . $stylesheet;
  $saved_path = '';

  if (file_exists($file)) {
    // Aggregate @imports recursively for each configured top level CSS file
    // without optimization. Aggregation and optimization will be
    // handled by drupal_build_css_cache() only.
    $style = drupal_load_stylesheet($file, FALSE);

    // Rewrite stylesheet with new colors.
    $style = _colorizer_rewrite_stylesheet($palette, $style);
    $base_file = $id . '.css';
    $css = $paths['target'] . $base_file;
    _colorizer_save_stylesheet($paths['target'] . $base_file, $style);
  }

  // Maintain list of files.
  if (!empty($css)) {
    variable_set('colorizer_' . $instance . '_stylesheet', $css);
  }
  return $css;
}
